observeEvent(input$my_datatable_cell_edit, {
#get values
info = input$my_datatable_cell_edit
i = as.numeric(info$row)
j = as.numeric(info$col)
k = as.numeric(info$value)
if(k < 0){ #convert to positive if negative
k <- k * -1
}
#write values to reactive
v$data[i,j] <- k
})
#render plot
output$my_plot <- renderPlot({
req(input$go) #require the input button to be non-0 (ie: don't load the plot when the app first loads)
isolate(v$data) %>%  #don't react to any changes in the data
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method = "lm")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(DT)
library(tidyverse)
ui <- fluidPage(
# Application title
titlePanel("Editable Dataframe and Plot"),
# Sidebar
sidebarLayout(
sidebarPanel(
DTOutput("my_datatable"),
actionButton("go",label = "Plot Data")
),
# Show plot
mainPanel(
plotOutput("my_plot")
)
)
)
server <- function(input, output) {
#initialize a blank dataframe
v <- reactiveValues(data = {
data.frame(x = numeric(0),y = numeric(0)) %>%
add_row(x = rep(0,10),y = rep(0,10))
})
#output the datatable based on the dataframe (and make it editable)
output$my_datatable <- renderDT({
DT::datatable(v$data, editable = TRUE)
})
#when there is any edit to a cell, write that edit to the initial dataframe
#check to make sure it's positive, if not convert
observeEvent(input$my_datatable_cell_edit, {
#get values
info = input$my_datatable_cell_edit
i = as.numeric(info$row)
j = as.numeric(info$col)
k = as.numeric(info$value)
if(k < 0){ #convert to positive if negative
k <- k * -1
}
#write values to reactive
v$data[i,j] <- k
})
#render plot
output$my_plot <- renderPlot({
req(input$go) #require the input button to be non-0 (ie: don't load the plot when the app first loads)
isolate(v$data) %>%  #don't react to any changes in the data
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method = "lm")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(DT)
library(tidyverse)
ui <- fluidPage(
# Application title
titlePanel("Editable Dataframe and Plot"),
# Sidebar
sidebarLayout(
sidebarPanel(
DTOutput("my_datatable"),
actionButton("go",label = "Plot Data")
),
# Show plot
mainPanel(
plotOutput("my_plot")
)
)
)
server <- function(input, output) {
#initialize a blank dataframe
v <- reactiveValues(data = {
data.frame(x = numeric(0),y = numeric(0)) %>%
add_row(x = rep(0,10),y = rep(0,10))
})
#output the datatable based on the dataframe (and make it editable)
output$my_datatable <- renderDT({
DT::datatable(v$data, editable = TRUE)
})
#when there is any edit to a cell, write that edit to the initial dataframe
#check to make sure it's positive, if not convert
observeEvent(input$my_datatable_cell_edit, {
#get values
info = input$my_datatable_cell_edit
i = as.numeric(info$row)
j = as.numeric(info$col)
k = as.numeric(info$value)
if(k < 0){ #convert to positive if negative
k <- k * -1
}
#write values to reactive
v$data[i,j] <- k
})
#render plot
output$my_plot <- renderPlot({
req(input$go) #require the input button to be non-0 (ie: don't load the plot when the app first loads)
isolate(v$data) %>%  #don't react to any changes in the data
ggplot(aes(x,y)) +
geom_point() +
geom_smooth(method = "lm")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(excelR)
shinyApp(
ui = fluidPage(excelOutput("table")),
server = function(input, output, session) {
output$table <-
renderExcel(excelTable(data = head(iris)))
observeEvent(input$table,{
table_data <- excel_to_R(input$table)
if(!is.null(table_data)){
print(table_data)
}
})
}
)
runApp()
if(interactive()){
library(shiny)
library(excelR)
shinyApp(
ui = fluidPage(excelOutput("table")),
server = function(input, output, session) {
output$table <-
renderExcel(excelTable(data = head(iris)))
observeEvent(input$table,{
print(excel_to_R(input$table))
})
}
)
}
runApp()
runApp()
library(shiny)
ui <- fluidPage(
fluidRow(
tags$head(
tags$style(type="text/css","label{ display: table-cell; text-align: center;vertical-align: middle; } .form-group { display: table-row;}")
),
column(5,style='background-color:#f2f2f2;min-width: 300px;',
h4("Label Issue"),
br(),
tags$table(
tags$tr(width = "100%",
tags$td(width = "60%", div(style = "font-size:10px;", "This is label1. I want all labels on left")),
tags$td(width = "40%", textInput(inputId = "a", label = NULL))),
tags$tr(width = "100%",
tags$td(width = "60%", tags$div(style = "font-size:10pX;", "label2")),
tags$td(width = "40%", textInput(inputId = "b", label = NULL)))
)
)
)
)
server <- function(input, output,session) {
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("shiny")
library("shinyMatrix")
m <- matrix(runif(12), 6, 2, dimnames = list(NULL, c("x", "y")))
ui <- fluidPage(
titlePanel("shinyMatrix: Simple App"),
sidebarPanel(
width = 6,
tags$h4("Data"),
matrixInput(
"sample",
value = m,
rows = list(
extend = TRUE
),
cols = list(
names = TRUE
)
)
),
mainPanel(
width = 6,
plotOutput("scatter")
)
)
server <- function(input, output, session) {
output$scatter <- renderPlot({
plot(input$sample, col = "red", main = "Scatterplot")
})
}
shinyApp(ui, server)
library("shiny")
library("shinyMatrix")
m <- matrix(runif(12), 6, 2, dimnames = list(NULL, c("x", "y")))
ui <- fluidPage(
titlePanel("shinyMatrix: Simple App"),
sidebarPanel(
width = 6,
tags$h4("Data"),
matrixInput(
"sample",
value = m,
rows = list(
extend = TRUE
),
cols = list(
names = TRUE
)
)
),
mainPanel(
width = 6,
plotOutput("scatter")
)
)
server <- function(input, output, session) {
output$scatter <- renderPlot({
plot(input$sample, col = "red", main = "Scatterplot")
})
}
shinyApp(ui, server)
library("shiny")
library("shinyMatrix")
m <- matrix(runif(12), 6, 2, dimnames = list(NULL, c("x", "y")))
ui <- fluidPage(
titlePanel("shinyMatrix: Simple App"),
sidebarPanel(
width = 6,
tags$h4("Data"),
matrixInput(
"sample",
value = m,
rows = list(
extend = TRUE
),
cols = list(
names = TRUE
)
)
),
mainPanel(
width = 6,
plotOutput("scatter")
)
)
server <- function(input, output, session) {
K <- input$sample
output$scatter <- renderPlot({
plot(input$sample, col = "red", main = "Scatterplot")
})
}
shinyApp(ui, server)
library("shiny")
library("shinyMatrix")
m <- matrix(runif(12), 6, 2, dimnames = list(NULL, c("x", "y")))
ui <- fluidPage(
titlePanel("shinyMatrix: Simple App"),
sidebarPanel(
width = 6,
tags$h4("Data"),
matrixInput(
"sample",
value = m,
rows = list(
extend = TRUE
),
cols = list(
names = TRUE
)
)
),
mainPanel(
width = 6,
plotOutput("scatter")
)
)
server <- function(input, output, session) {
K <- input$sample
output$scatter <- renderPlot({
plot(input$sample, col = "red", main = "Scatterplot")
})
}
shinyApp(ui, server)
shiny::runApp()
runApp()
runApp()
input$sample
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dataupload=FALSE
dataupload
runApp()
runApp()
runApp()
runApp()
runApp()
dataupload
dataupload=TRUE
dataupload
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fluidPage(
titlePanel("Conditional panels"),
column(4, wellPanel(
sliderInput("n", "Number of points:",
min = 10, max = 200, value = 50, step = 10)
)),
column(5,
"The plot below will be not displayed when the slider value",
"is less than 50.",
# With the conditionalPanel, the condition is a JavaScript
# expression. In these expressions, input values like
# input$n are accessed with dots, as in input.n
conditionalPanel("input.n >= 50",
plotOutput("scatterPlot", height = 300)
)
)
)
function(input, output) {
output$scatterPlot <- renderPlot({
x <- rnorm(input$n)
y <- rnorm(input$n)
plot(x, y)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fluidPage(
titlePanel("Conditional panels"),
column(4, wellPanel(
sliderInput("n", "Number of points:",
min = 10, max = 200, value = 50, step = 10)
)),
column(5,
"The plot below will be not displayed when the slider value",
"is less than 50.",
# With the conditionalPanel, the condition is a JavaScript
# expression. In these expressions, input values like
# input$n are accessed with dots, as in input.n
conditionalPanel("input.n >= 50",
plotOutput("scatterPlot", height = 300)
)
)
)
function(input, output) {
output$scatterPlot <- renderPlot({
x <- rnorm(input$n)
y <- rnorm(input$n)
plot(x, y)
})
}
shinyApp(ui=ui,server=server)
ui <- fluidPage(
titlePanel("Conditional panels"),
column(4, wellPanel(
sliderInput("n", "Number of points:",
min = 10, max = 200, value = 50, step = 10)
)),
column(5,
"The plot below will be not displayed when the slider value",
"is less than 50.",
# With the conditionalPanel, the condition is a JavaScript
# expression. In these expressions, input values like
# input$n are accessed with dots, as in input.n
conditionalPanel("input.n >= 50",
plotOutput("scatterPlot", height = 300)
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlot({
x <- rnorm(input$n)
y <- rnorm(input$n)
plot(x, y)
})
}
shinyApp(ui=ui,server=server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
server = shinyServer(function(input, output, session) {
output$color_pr <- renderPrint({
req(input$select1)
input$select1
})
output$panelStatus <- reactive({
input$select1=="show"
})
outputOptions(output, "panelStatus", suspendWhenHidden = FALSE)
})
ui=shinyUI(fluidPage(
radioButtons("select1", "Show text?",
c("Yes" = "show", "No" = "noshow")),
conditionalPanel(
condition = 'output.panelStatus'
,
verbatimTextOutput("color_pr"))
))
shinyApp(ui=ui,server=server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
