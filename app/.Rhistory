shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
# Generate dataset and file myocarditis_vaccinated.csv
# https://www.nejm.org/doi/full/10.1056/NEJMoa2110475
s1 <- 21 # myocarditis vaccinated
n1 <- 938812 # vaccinated
s2 <- 6 # myocarditis non-vaccinated
n2 <- 938812 # non-vaccinated
y <- c(rep(1,s1), rep(0,n1-s1), rep(1,s2), rep(0,n2-s2))
s <- c(rep("Vaccine",n1), rep("Placebo",n2))
dataset <- data.frame(y,s)
write.csv(dataset,"myocarditis_vaccinated.csv")
# Generate dataset and file myocarditis_infected.csv
# https://www.nejm.org/doi/full/10.1056/NEJMoa2110475
s1 <- 19 # myocarditis infected
n1 <- 183710 # infected
s2 <- 1 # myocarditis non-infected
n2 <- 183710 # non-infected
y <- c(rep(1,s1), rep(0,n1-s1), rep(1,s2), rep(0,n2-s2))
s <- c(rep("Vaccine",n1), rep("Placebo",n2))
dataset <- data.frame(y,s)
write.csv(dataset,"myocarditis_infected.csv")
# Generate dataset and file myocarditis_vaccinated.csv
# https://www.nejm.org/doi/full/10.1056/NEJMoa2110475
s1 <- 21 # myocarditis vaccinated
n1 <- 938812 # vaccinated
s2 <- 6 # myocarditis non-vaccinated
n2 <- 938812 # non-vaccinated
y <- c(rep(1,s1), rep(0,n1-s1), rep(1,s2), rep(0,n2-s2))
s <- c(rep("Vaccine",n1), rep("Placebo",n2))
dataset <- data.frame(y,s)
write.csv(dataset,"G:/REYAR/Statsomat/Development/Bayes/datasets/myocarditis_vaccinated.csv")
# Generate dataset and file myocarditis_infected.csv
# https://www.nejm.org/doi/full/10.1056/NEJMoa2110475
s1 <- 19 # myocarditis infected
n1 <- 183710 # infected
s2 <- 1 # myocarditis non-infected
n2 <- 183710 # non-infected
y <- c(rep(1,s1), rep(0,n1-s1), rep(1,s2), rep(0,n2-s2))
s <- c(rep("Vaccine",n1), rep("Placebo",n2))
dataset <- data.frame(y,s)
write.csv(dataset,"G:/REYAR/Statsomat/Development/Bayes/datasets/myocarditis_infected.csv")
# Generate dataset and file myocarditis_vaccinated.csv
# https://www.nejm.org/doi/full/10.1056/NEJMoa2110475
s1 <- 21 # myocarditis vaccinated
n1 <- 938812 # vaccinated
s2 <- 6 # myocarditis non-vaccinated
n2 <- 938812 # non-vaccinated
y <- c(rep(1,s1), rep(0,n1-s1), rep(1,s2), rep(0,n2-s2))
s <- c(rep("vaccinated ",n1), rep("non-vaccinated",n2))
dataset <- data.frame(y,s)
write.csv(dataset,"G:/REYAR/Statsomat/Development/Bayes/datasets/myocarditis_vaccinated.csv")
# Generate dataset and file myocarditis_infected.csv
# https://www.nejm.org/doi/full/10.1056/NEJMoa2110475
s1 <- 19 # myocarditis infected
n1 <- 183710 # infected
s2 <- 1 # myocarditis non-infected
n2 <- 183710 # non-infected
y <- c(rep(1,s1), rep(0,n1-s1), rep(1,s2), rep(0,n2-s2))
s <- c(rep("infected",n1), rep("non-infected",n2))
dataset <- data.frame(y,s)
write.csv(dataset,"G:/REYAR/Statsomat/Development/Bayes/datasets/myocarditis_infected.csv")
shiny::runApp()
runApp()
level <- 1 # level for the existence of the outcome
# Import libraries
library(rmarkdown)
library(data.table)
library(shiny)
##############################################################
# Simulate the Shiny GUI
# The user uploads a file or inserts the cell frequencies directly
# If both file and cell frequencies are nonempty, then the algorithms considers the file
# Otherwise, the cell frequencies must be nonempty
##############################################################
# Data as a file
filename <- "datasets/testfile.csv"
decimal <- "."
#data <- fread(filename, header = "auto", sep ="auto", dec = decimal, encoding ="UTF-8", data.table = FALSE, na.strings = "")
outcome <- "y" # outcome variable
exposure <- "s" # exposure variable
level <- 1 # level for the existence of the outcome
# Data as cell frequencies
s1 <- 21 # outcome positive, set to NA if you want to consider the file from above
n1 <- 938812 # exposed
s2 <- 6 # outcome positive
n2 <- 938812 # not-exposed
# User delivers the priors (are beta distributions with parameters a and b, for each Theta)
a1 <- 1/2
b1 <- 1/2
a2 <- 1/2
b2 <- 1/2
# User selection for the function of parameters
## Possible values: "Theta1-Theta2", "Theta1/Theta2", "1-Theta1/Theta2"
## Use integers to represent values from above
user_selection_function_param <- 2
# Region of practical equivalence (we will learn later about it)
rope_user <- NULL
##############################################################
# Run parametric, automatic .Rmd file
##############################################################
rmarkdown::render("report.Rmd", params = list(
filename = filename,
decimal = decimal,
data = data,
outcome = outcome,
exposure = exposure,
level = level
))
# Import libraries
library(rmarkdown)
library(data.table)
library(shiny)
##############################################################
# Simulate the Shiny GUI
# The user uploads a file or inserts the cell frequencies directly
# If both file and cell frequencies are nonempty, then the algorithms considers the file
# Otherwise, the cell frequencies must be nonempty
##############################################################
# Data as a file
filename <- "datasets/testfile.csv"
decimal <- "."
#data <- fread(filename, header = "auto", sep ="auto", dec = decimal, encoding ="UTF-8", data.table = FALSE, na.strings = "")
outcome <- "y" # outcome variable
exposure <- "s" # exposure variable
level <- 1 # level for the existence of the outcome
# Data as cell frequencies
s1 <- 21 # outcome positive, set to NA if you want to consider the file from above
n1 <- 938812 # exposed
s2 <- 6 # outcome positive
n2 <- 938812 # not-exposed
# User delivers the priors (are beta distributions with parameters a and b, for each Theta)
a1 <- 1/2
b1 <- 1/2
a2 <- 1/2
b2 <- 1/2
# User selection for the function of parameters
## Possible values: "Theta1-Theta2", "Theta1/Theta2", "1-Theta1/Theta2"
## Use integers to represent values from above
user_selection_function_param <- 2
# Region of practical equivalence (we will learn later about it)
rope_user <- NULL
##############################################################
# Run parametric, automatic .Rmd file
##############################################################
rmarkdown::render("report.Rmd", params = list(
filename = filename,
decimal = decimal,
data = data,
outcome = outcome,
exposure = exposure,
level = level
))
# Import libraries
library(rmarkdown)
library(data.table)
library(shiny)
##############################################################
# Simulate the Shiny GUI
# The user uploads a file or inserts the cell frequencies directly
# If both file and cell frequencies are nonempty, then the algorithms considers the file
# Otherwise, the cell frequencies must be nonempty
##############################################################
# Data as a file
filename <- "datasets/testfile.csv"
decimal <- "."
data <- fread(filename, header = "auto", sep ="auto", dec = decimal, encoding ="UTF-8", data.table = FALSE, na.strings = "")
outcome <- "y" # outcome variable
exposure <- "s" # exposure variable
level <- 1 # level for the existence of the outcome
# Data as cell frequencies
s1 <- 21 # outcome positive, set to NA if you want to consider the file from above
n1 <- 938812 # exposed
s2 <- 6 # outcome positive
n2 <- 938812 # not-exposed
# User delivers the priors (are beta distributions with parameters a and b, for each Theta)
a1 <- 1/2
b1 <- 1/2
a2 <- 1/2
b2 <- 1/2
# User selection for the function of parameters
## Possible values: "Theta1-Theta2", "Theta1/Theta2", "1-Theta1/Theta2"
## Use integers to represent values from above
user_selection_function_param <- 2
# Region of practical equivalence (we will learn later about it)
rope_user <- NULL
##############################################################
# Run parametric, automatic .Rmd file
##############################################################
rmarkdown::render("report.Rmd", params = list(
filename = filename,
decimal = decimal,
data = data,
outcome = outcome,
exposure = exposure,
level = level
))
##############################################################
# Run parametric, automatic .Rmd file
##############################################################
rmarkdown::render("report.Rmd", params = list(
filename = filename,
decimal = decimal,
data = data,
outcome = outcome,
exposure = exposure,
level = level,
s1=s1,
n1=n1,
s2=s2,
n2=n2,
a1=a1,
b1=b1,
a2=a2,
b2=b2
))
shiny::runApp()
